"""サンプルコードとテストケースの定義"""

code_samples = [
    {
        "code": """def add(a, b):\n    return a + b""",
        "test_cases": [
            {"input": "1, 2", "expected_output": "3"},
            {"input": "5, -3", "expected_output": "2"},
            {"input": "0, 0", "expected_output": "0"},
            {"input": "-5, -7", "expected_output": "-12"},
            {"input": "100, 200", "expected_output": "300"},
            {"input": "0.5, 0.7", "expected_output": "1.2"},
            {"input": "-1.5, 2.5", "expected_output": "1.0"},
            {"input": "999999, 1", "expected_output": "1000000"},
            {"input": "2.0, -2.0", "expected_output": "0.0"},
            {"input": "1.23456, 2.34567", "expected_output": "3.58023"},
        ],
    },
    {
        "code": """def subtract(a, b):\n    return a - b""",
        "test_cases": [
            {"input": "5, 3", "expected_output": "2"},
            {"input": "10, -5", "expected_output": "15"},
            {"input": "0, 0", "expected_output": "0"},
            {"input": "-5, -3", "expected_output": "-2"},
            {"input": "100, 99", "expected_output": "1"},
            {"input": "1000, 1", "expected_output": "999"},
            {"input": "3.14, 1.14", "expected_output": "2.0"},
            {"input": "1, 2", "expected_output": "-1"},
            {"input": "0.5, 0.25", "expected_output": "0.25"},
            {"input": "10.1, 0.1", "expected_output": "10.0"},
        ],
    },
    {
        "code": """def multiply(a, b):\n    return a * b""",
        "test_cases": [
            {"input": "2, 3", "expected_output": "6"},
            {"input": "5, 0", "expected_output": "0"},
            {"input": "-4, 3", "expected_output": "-12"},
            {"input": "-2, -3", "expected_output": "6"},
            {"input": "0.5, 4", "expected_output": "2.0"},
            {"input": "1.5, 2.5", "expected_output": "3.75"},
            {"input": "10, 10", "expected_output": "100"},
            {"input": "0.1, 0.1", "expected_output": "0.01"},
            {"input": "100, 0.5", "expected_output": "50.0"},
            {"input": "-1, 999", "expected_output": "-999"},
        ],
    },
    {
        "code": """def divide(a, b):\n    return a / b if b != 0 else 'Error: Division by zero'""",
        "test_cases": [
            {"input": "6, 2", "expected_output": "3.0"},
            {"input": "5, 0", "expected_output": "Error: Division by zero"},
            {"input": "-6, 2", "expected_output": "-3.0"},
            {"input": "0, 5", "expected_output": "0.0"},
            {"input": "10, 3", "expected_output": "3.3333333333333335"},
            {"input": "1, 2", "expected_output": "0.5"},
            {"input": "-10, -2", "expected_output": "5.0"},
            {"input": "100, 4", "expected_output": "25.0"},
            {"input": "1, 3", "expected_output": "0.3333333333333333"},
            {"input": "7, 7", "expected_output": "1.0"},
        ],
    },
    {
        "code": """def power(base, exponent):\n    return base ** exponent""",
        "test_cases": [
            {"input": "2, 3", "expected_output": "8"},
            {"input": "5, 0", "expected_output": "1"},
            {"input": "2, -1", "expected_output": "0.5"},
            {"input": "3, 2", "expected_output": "9"},
            {"input": "10, 2", "expected_output": "100"},
            {"input": "2, 10", "expected_output": "1024"},
            {"input": "1, 5", "expected_output": "1"},
            {"input": "-2, 2", "expected_output": "4"},
            {"input": "-2, 3", "expected_output": "-8"},
            {"input": "0.5, 2", "expected_output": "0.25"},
        ],
    },
    {
        "code": """def factorial(n):\n    return 1 if n <= 1 else n * factorial(n-1)""",
        "test_cases": [
            {"input": "0", "expected_output": "1"},
            {"input": "1", "expected_output": "1"},
            {"input": "2", "expected_output": "2"},
            {"input": "3", "expected_output": "6"},
            {"input": "4", "expected_output": "24"},
            {"input": "5", "expected_output": "120"},
            {"input": "6", "expected_output": "720"},
            {"input": "7", "expected_output": "5040"},
            {"input": "8", "expected_output": "40320"},
            {"input": "10", "expected_output": "3628800"},
        ],
    },
    {
        "code": """def is_palindrome(text):\n    text = str(text).lower()\n    return text == text[::-1]""",
        "test_cases": [
            {"input": "'radar'", "expected_output": "True"},
            {"input": "'hello'", "expected_output": "False"},
        ],
    },
    {
        "code": """def fibonacci(n):\n    if n <= 1: return n\n    return fibonacci(n-1) + fibonacci(n-2)""",
        "test_cases": [
            {"input": "0", "expected_output": "0"},
            {"input": "1", "expected_output": "1"},
            {"input": "2", "expected_output": "1"},
            {"input": "7", "expected_output": "13"},
            {"input": "8", "expected_output": "21"},
            {"input": "9", "expected_output": "34"},
        ],
    },
    {
        "code": """def count_vowels(text):\n    return sum(1 for char in text.lower() if char in 'aeiou')""",
        "test_cases": [
            {
                "input": "'hello'",
                "expected_output": "2",
                "description": "Basic word",
            },
            {
                "input": "'AEIOU'",
                "expected_output": "5",
                "description": "All vowels",
            },
            {
                "input": "'rhythm'",
                "expected_output": "0",
                "description": "No vowels",
            },
            {
                "input": "'Python'",
                "expected_output": "1",
                "description": "One vowel",
            },
            {
                "input": "'beautiful'",
                "expected_output": "5",
                "description": "Multiple vowels",
            },
            {
                "input": "'AeIoU'",
                "expected_output": "5",
                "description": "Mixed case vowels",
            },
            {
                "input": "'123'",
                "expected_output": "0",
                "description": "Numbers only",
            },
            {
                "input": "'OpenAI'",
                "expected_output": "4",
                "description": "Company name",
            },
            {
                "input": "'aaa'",
                "expected_output": "3",
                "description": "Repeated vowels",
            },
            {
                "input": "'XYZ'",
                "expected_output": "0",
                "description": "Consonants only",
            },
        ],
    },
    {
        "code": """def reverse_string(text):\n    return text[::-1]""",
        "test_cases": [
            {"input": "'hello'", "expected_output": "'olleh'"},
            {"input": "'radar'", "expected_output": "'radar'"},
            {"input": "'123 456'", "expected_output": "'654 321'"},
            {"input": "'!@#$%'", "expected_output": "'%$#@!'"},
        ],
    },
]
